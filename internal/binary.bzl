# Copyright 2019 The Bazel Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""PostCSS binary rule.

Building a postcss_binary target builds an internal PostCSS runner, and runs
it using a provided list of PostCSS plugins, against input .css (and optionally
.css.map).
"""

load("@bazel_skylib//lib:dicts.bzl", "dicts")
load(":runner_bin.bzl", "postcss_runner_bin")
load(":run.bzl", "postcss_run")

ERROR_STACK_PLUGIN_CONFLICT = "The `stack` attribute can't be simultaneously used with `plugins` and `deps`."

def postcss_binary(
        name,
        src,
        stack = None,
        plugins = {},
        deps = [],
        additional_outputs = [],
        output_name = "",
        sourcemap = False,
        data = [],
        named_data = {},
        wrapper = None,
        **kwargs):
    """Runs PostCSS with plugins provided via either the `stack` attribute, or the `plugins` and `deps` attributes.

    Args:
        name: The name of the build rule.
        src: The input .css, and optionally .css.map files. (This includes
            outputs from preprocessors such as sass_binary.)
        stack: The PostCSS stack, which sets plugin configuration. If not
            provided, plugins and deps should be directly provided in the
            `plugins` and `deps` attributes.
        plugins: See plugin documentation for postcss_stack. If not provided,
            plugins should be provided via the `stack` attribute.
        deps: Additional NodeJS modules the plugins depend on. The PostCSS
            module and plugin modules are always implicitly included.
        additional_outputs: Any additional outputs that are generated by the
            provided plugins.
        output_name: Output name.
        sourcemap: Whether to generate a source map. If False, any existing
            sourceMappingURL comment is deleted.
        data: Standard Bazel argument.
        named_data: A map from names to targets to use as data dependencies.
            This works just like `data` except that the targets' files can be
            accessed through `bazel.data.${name}`.
        wrapper: Wrapper for the postcss binary. If passed, the wrapper is run
            in place of the postcss binary, with an extra first arg pointing
            to the actual postcss binary. (Workers are not supported when using
            a wrapper.)
        **kwargs: Standard BUILD arguments to pass.
    """

    if stack != None and (len(plugins.keys()) > 0 or len(deps) > 0):
        fail(ERROR_STACK_PLUGIN_CONFLICT)

    # If a stack was provided, it acts as the runner. (Plugins come from a
    # provider created by postcss_stack.)
    runner_name = stack

    # If a stack wasn't provided, we will be passing through `plugins`.
    # Manually create the associated `runner`.
    if stack == None:
        runner_name = "%s.postcss_runner" % name
        postcss_runner_bin(
            name = runner_name,
            deps = deps + plugins.keys(),
            **dicts.add(kwargs, {"visibility": ["//visibility:private"]})
        )

    postcss_run(
        name = name,
        src = src,
        output_name = output_name,
        additional_outputs = additional_outputs,
        plugins_info = ("%s.postcss_plugins" % stack) if stack else None,
        plugins = plugins,
        runner = runner_name,
        sourcemap = sourcemap,
        data = data,
        named_data = named_data,
        wrapper = wrapper,
        **kwargs
    )
